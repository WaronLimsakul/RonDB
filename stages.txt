step 1
should be able to
1. input somethign and got unrecognized "error"
2. or if .exit -> exit

step 2
1. recognize meta command
2. know insert and select command type

step 3.1
1. support inseting a row + printing all rows
    - this format "insert id name email" or "select"
    - yes, we have id -> int, name -> varchar32, email -> varchar255 (why not 256?)
2. only in memory
3. support single hardcoded table
- there is sscanf(), like scanf but the read from first argument instead.
- try to enum the error type
- use prepro macro to define sizes or compile time var

step3.2
- Store rows in blocks of memory called pages
- Each page stores as many rows as it can fit
- Rows are serialized into a compact representation with each page
- Pages are only allocated as needed <- so we can't just malloc(100 * page)
- Keep a fixed-size array of pointers to pages

1. a table struct that keep track of
    - how many rows are in the table right now
    - addresses of each page
(you can determine size of page and max number of page in the table)
    1.1 a function that create new table and set all zeroes
    1.2 a function that frees table
2. a function that get a row address from just table and row number.
    - can allocate a new page if it doesn't exit
3. delegate insert and select to different functions
4. have a const representing the executing result for both execution type to share
5. execute insert already row from the statement so we can just copy the row into the table (don't forget to check the max cap)
6. execute select by just loop and print each row, be cheap here.

step 5
1. have a Pager struct to manage page instead of using just page array in table
    - a page is just one chunk of bytes in a file on disk
    - we will store all pages in the same file.
2. redo the new_table into db_open(file_name). it should
    - open db file
    - init pager
    - init table
    *note that we know the length of the file after we open it
3. note the flags for open(filename, flags, mode): flags is what programm gonna
    do with the file, mode is what can user do with the file.
4. move the logic for fetching a page into pager's own method:
5. get_page() method should have logic handling the cache miss (allocate memory and load from file)

step 5.2
1. we need db_close(table)
    - flush cahced pages to disk (deal with full and partial page separately)
    - close db file
    - free all pages + pager + table
2. just db_close() when exit (so do_meta_command() need table now)
3. we need pager_flush(pager, page_num, size)
    - just write the page into the file in proper location
4. update main() to take more db file when called

step 6: cursor
1. we need cursor struct.
2. then we can get cursor from the start or the end of table
3. retrieving the row pointer using cursor instead
4. use cursor when execute insert and select

step 7: learn about b+ tree

step 8: B+ tree nodes
1. we need enum for node type (internal or leaf)
2. we need offset and size for node header
    - type
    - is root?
    - parent pointer
    - in total bytes
3. that's for every node. But for leaf, we need more
    - how many cells we have
    - in total bytes
4. in the leaf, we have array of cells (1 cell = key + value (value = row))
so we need size + offset for that too
    - key
    - value
    - cell

step 8.2: Method for access leaf node fields
- num cells
- node cells
- node key
- node value

step 8.3:
1. We will only store whole pages from now on
2. Pagers have number of pages
3. Tables only store root page number. no number of rows

step 8.4: change cursor
1. contain page_num and cell_num instead of row_num
2. change table_start() and table_end() to work properly
3. cursor_value() and cursor_advance() too

step 8.5
1. update db_open() to use b-tree
    - delete useless things
    - initialize new root node if the file is empty
2. We need leaf_node_insert(cursor, key, Row* value) to insert into where cursor point
    - check max cells
    - if the insert cell is in between, make room for it
    - cpy to the space

step 8.6
1. update execute_insert()
    - delete useless things
    - use the leaf_node_inser() (still use the table_end cursor)
2. add command to print constant
    - should take ".constants" and we print
    - printf("ROW_SIZE: %d\n", ROW_SIZE);
    - printf("COMMON_NODE_HEADER_SIZE: %d\n", COMMON_NODE_HEADER_SIZE);
    - printf("LEAF_NODE_HEADER_SIZE: %d\n", LEAF_NODE_HEADER_SIZE);
    - printf("LEAF_NODE_CELL_SIZE: %d\n", LEAF_NODE_CELL_SIZE);
    - printf("LEAF_NODE_SPACE_FOR_CELLS: %d\n", LEAF_NODE_SPACE_FOR_CELLS);
    - printf("LEAF_NODE_MAX_CELLS: %d\n", LEAF_NODE_MAX_CELLS);
3. add test for constants
4. add command ".btree" to print out the tree structure
    - print the page 0 for now
    - helper should take node and print like
    - Tree:
      leaf (size 3)
        - 0 : 3
        - 1 : 1
        - 2 : 2
    - so 0-index : in

step 9
1. update execute_insert() to find the key (id) in table and insert there
2. delete table_end()
3. we need cursor table_find(table, key) to get cursor at that part
    - should just check if the root is leaf or internal and execute when it's leaf
4. we need cursor leaf_node_find(table, page_num, key) (binary search)
5. not not sure if we need return node type of just pointer to it is enough

step 10.1
1. remove error when table_find() an internal node
2. remove check when num_cells >= leaf node's max cells
3. we need void leaf_node_split_and_insert(cursor, key, Row *value). It should
    - get a new page
    - init it as a leaf node
    - move the upper half into the new node.
    - update the how many cells in old and new node
4. if the old leaf is a leaf, we will create a new node
5. so we need create_new_root(table, new_node_num). guide:

Let N be the root node. First allocate two nodes, say L and R. Move lower half
of N into L and the upper half into R. Now N is empty. Add 〈L, K,R〉 in N, where
K is the max key in L. Page N remains the root. Note that the depth of the tree
has increased by one, but the new tree remains height balanced without violating
any B+-tree property.

So basically
- we have root (store left) and right (stores right)
- just malloc the left and write our root to it (but toggle the "is_root" back to false)
- connect them

Before split (one-node B+ tree):
[5: "a", 12: "b"]

After inserting 1: "c":
        [ *, 5, * ]
         /      \
[1: "c", 5: "a"]  [12: "b"]

6. internal node-only header format
- num_keys (all keys it has)
- right_child  (page number of rightmost child)
- total header size of internal node
7. internal node body format: array of cells. Each cell has
- child (pointer to a child node)
- key (see the child above? yeah, it's the maximum key of that child)
* so basically it has n (key + child) and + 1 child (right most in the header) *

Note here that only 1 internal node can hold 510 keys and 511 child
that means it can cover 500GB with just 4 disk fetches. That's the reason why B+ Tree
is the best for DBMS: log(n) everywhere + low fetch time.
8. method for internal node
    - num_keys(node)
    - right_child(node)
    - cell(node, cell_num)
    - child(node, cell_num)
    - key(node, cell_num)
9. define uint32 get_node_max_key(anynode)

step 10.2
1. update .btree to print something like this:
Tree:
- internal (size 1)
  - leaf (size 7)
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    - 7
  - key 7
  - leaf (size 7)
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
(number in bullet is key in the leaf)

step 11: recursively find a place to insert with internal node
1. we need Cursor *internal_node_find(table, page_num, key) to find a
    - binary search for in the level to find target child
    - if child is internal, recur
    - if leaf, just return leaf_node_find
2. replace the exit() in table_find with internal_node_find() instead
3. rewrite some tests

step 12: scanning entire b-tree (fix select)
1. add test to test when split and select
2. rewrite table_start(table) this function shouldn't assume that root is leaf
    - use table_find() to find key 0 to get left-most. (even if it doesn't
    exist, we still get the leftmost because we use binary search range)
3. we need to be able to jump to the next leaf when traversing in "select"
    - we need next_leaf in leaf header: page_num of next leaf
        - add the const size
        - add method to access
        - default next_leaf to 0 when init new leaf
        - update the next_leaf when split leaf
    - update the constants test
        - leaf node header should be +4 bytes now
        - space for cells will be -4 bytes
        - (so lucky that the max cells is still the same)
4. when advance cursor (we assume that the cursor point to leaf node)
    - we can just jump to the next node (check first)

step 13: update parent after split
After (non-root) leaf split, we have to fix the parent like this:

    Before split:
        [ *, 5, * ]
         /       \
    [1:"c",5:"a"] [12: "b"]

    After inserting 3:"d" and splitting:
        [ *, 3, *, 5, * ]
        /        \     \
[1:"c",3:"d"] [5:"a"] [12: "b"]

    1. Update the old key in the parent to be the maximum key in the left child ("3")
    2. Add a new child pointer / key pair after the updated key
        - The new pointer points to the new child node
        - The new key is the maximum key in the new child node (“5”)

1. so we need these in the step 1
    - node_parent() to access node's parent.
    - set parent for new node when split
    - in the function that we create new root, just update both children to point to the root
    - update_internal_node_key(node, old_key, new_key) to update the parent
        - We can add internal_node_find_child(node, key) to help (binary search like always)

2. we need internal_node_insert(table, internal_page_num, new_page_num)
    - if internal node has no room left
        - throw exit fail for now
        - print "need to implement splitting internal node"
    - check carefully if you have shift + insert OR add to the right
        (replace right child and put the old one in the body)
3. use all we define to update split leaf function
4. define INTERNAL_NODE_MAX_CELLS = 3
5. write test for that.

step 14: split the internal node
(ref img: https://cstack.github.io/db_tutorial/assets/images/splitting-internal-node.png)
    1. Create a sibling node to store (n-1)/2 of the original node’s keys
    2. Move these keys from the original node to the sibling node
    3. Update the original node’s key in the parent to reflect its new max key after splitting
    4. Insert the sibling node into the parent (could result in the parent also being split)
0. rewrite get_node_max_key(pager, node) : walk down to the right
1. we need internal_node_split_and_insert(table, parent_page_num, child_page_num)
    - store old_page_num, old_page_max
    - store
2. in internal_node_insert(), we now have to check that internal node is empty
or not before inserting. the first thing to fill is right child.
3. when init internal node, set right child to be INVALID_PAGE_NUM
4. guard internal_node_child() to not access INVALID_PAGE_NUM child
5. guard print_tree() to not access INVALID_PAGE_NUM node
6. update test
